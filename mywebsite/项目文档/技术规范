
---

# 项目启动前技术架构规范（AI/自动化友好版）

---

## 1. 项目目标与需求摘要

- 网站需完美适配手机、平板、PC等多终端，兼容主流浏览器，具备自适应能力。
- 页面结构分为Top区（Logo+导航，1920*60px）、主视觉区（多版式内容）、Footer区（静态信息，1920*60px）。
- 风格可灵活调整，前期采用Ant Design黑白灰主题，后期支持主题切换。
- 所有资源（如图片、视频、文字等）需支持后台灵活配置。
- 代码、文档、接口、UI、部署等需有统一规范，便于团队协作和AI自动化处理。

---

## 2. 技术选型

### 2.1 前端

- **主框架**：React
- **UI组件库**：Ant Design
- **图标库**：Ant Design Icons
- **动画库**：Framer Motion（如需动画）
- **数据可视化/图表库**：AntV G2/Chart.js（如有数据展示需求）
- **表单库**：Ant Design Form
- **状态管理库**：Redux Toolkit（如有复杂状态需求）
- **路由库**：react-router-dom v6
- **网络请求库**：axios
- **测试库**：Jest + React Testing Library
- **样式方案**：CSS/SASS/LESS，**所有UI风格、颜色、字体、布局等必须支持通过CSS进行统一调整**，推荐使用CSS变量和主题切换方案。

### 2.2 后端

- **主框架**：Express.js
- **数据库**：lowdb（开发期），后期可升级为MongoDB/MySQL等
- **API文档**：OpenAPI/Swagger
- **测试库**：Jest/Supertest
- **跨域支持**：cors
- **数据校验**：Joi（如有复杂数据校验需求）

### 2.3 数据库

- **开发期**：lowdb（JSON文件）
- **生产期建议**：MongoDB/MySQL/PostgreSQL
- **管理工具**：DBeaver/Navicat

---

## 3. 目录结构建议

```
mywebsite/
├── frontend/
│   ├── src/
│   │   ├── assets/
│   │   ├── components/
│   │   ├── views/
│   │   ├── router/
│   │   ├── styles/
│   │   └── index.js
│   └── package.json
├── backend/
│   ├── server.js
│   ├── db.json
│   └── package.json
├── README.md
├── 需求文档.md
├── 架构规划.md
└── .git/
```

---

## 4. 代码规范与注释规范

- **统一风格**：Prettier + ESLint（airbnb 或 ant-design 规范）
- **注释规范**：
  - 文件头部：功能、作者、日期
  - 函数/类：功能、参数、返回值、异常
  - 业务逻辑：关键流程、易混淆点
- **命名规范**：驼峰命名，组件大写，文件小写
- **目录结构**：分层清晰，便于扩展

---

## 5. 接口文档与API规范

- 推荐 OpenAPI/Swagger 自动生成接口文档
- 路由命名统一（如 `/api/homepage`、`/api/resource`）
- 参数、返回值、错误码结构化
- 示例接口文档模板：

```yaml
paths:
  /api/homepage:
    get:
      summary: 获取首页资源
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  images:
                    type: array
                    items: { type: string }
                  icon:
                    type: string
```

---

## 6. UI设计规范

- **全站UI风格、颜色、字体、布局等，必须支持通过CSS（或SASS/LESS）进行统一调整。**
- 所有Ant Design组件、定制组件、响应式断点、主题色等，均应通过全局样式表或主题变量集中管理，便于后期一键切换和维护。
- 鼓励采用CSS变量、主题切换方案，确保后续风格调整无需大规模修改组件代码。
- **配色**：前期黑白灰，主色#222，辅色#fff/#ccc，后期支持主题切换
- **字体**：主字体 PingFang SC, Microsoft YaHei, Arial, sans-serif
- **布局**：Top/Footer区1920*60px（大屏），移动端自适应
- **组件风格**：Ant Design风格，统一圆角、阴影、间距
- **响应式断点**：PC >1200px，平板 768-1200px，手机 <768px

---

## 7. 测试用例与测试规范

- 前端：Jest + React Testing Library，覆盖主要组件和业务逻辑
- 后端：Jest/Supertest，覆盖API接口
- 测试用例结构清晰，命名规范，覆盖率>80%

---

## 8. 需求文档与变更管理

- 需求文档结构化，便于AI自动识别与追踪
- 变更记录建议用 git commit message 规范（如 Conventional Commits）

---

## 9. 项目部署与运维

- 本地开发：`npm start`（前后端分离）
- 生产部署：推荐 Docker 或云主机，支持CI/CD
- 端口规范：前端3000+，后端8080或5000+
- 详细部署说明写入 README.md

---

## 10. AI/自动化友好规则与Cursor agent工作流程

### 10.1 方案设计优先
- Cursor agent 在接收到新需求后，**必须首先根据需求文档和架构规划，自动生成一份详细的技术实现方案**（包括页面结构、数据流、API设计、UI风格、技术选型等）。
- 该方案需结构化、条理清晰，便于用户快速理解和评审。

### 10.2 用户界面输出与交互
- Cursor agent 必须将自动生成的方案通过用户界面（如Markdown、表格、可视化结构图等）输出给用户。
- 方案输出后，**必须主动询问用户是否同意执行**，或是否需要调整、细化、补充。

### 10.3 执行前确认
- 只有在用户明确同意后，Cursor agent 才可自动执行后续的代码生成、依赖安装、目录操作等任务。
- 如用户有补充意见，Cursor agent 应根据反馈自动优化方案并再次确认。

### 10.4 UI调整与主题切换
- 所有UI相关的实现，均需保证后续可通过CSS/主题变量进行统一调整。
- 方案中需明确说明如何通过CSS/主题变量实现全站风格调整。

### 10.5 权限与目录操作
- Cursor agent 执行命令前需确保有正确的系统权限，并在正确的目录下操作。

---

## 11. 兼容性与可扩展性建议

- 技术、库、组件、框架、UI设计规范及版本兼容性需在方案中明确说明
- 如现有技术无法满足需求，需给出替代建议
- 所有规范、模板、接口、注释、目录结构均为结构化、标准化格式，便于AI自动化处理和后续扩展

---

## 12. 版本管理与Git使用规范

### 12.1 仓库结构

- 项目根目录下统一初始化一个git仓库，包含前端（frontend）和后端（backend）所有代码。

### 12.2 基本操作

- **初始化仓库**  
  在项目根目录执行：
  ```bash
  git init
  ```

- **添加全部文件并提交**  
  ```bash
  git add .
  git commit -m "项目初始化：前后端代码、文档、配置"
  ```

- **日常开发提交**  
  - 每次实现新功能、修复bug、调整配置等，均需提交commit，并写明有意义的提交信息。
  - 推荐使用 [Conventional Commits](https://www.conventionalcommits.org/zh-hans/v1.0.0/) 规范，如：
    ```
    feat(frontend): 新增首页响应式布局
    fix(backend): 修复API跨域问题
    docs: 更新需求文档
    ```

- **分支管理**  
  - 主分支（main/master）用于稳定版本。
  - 新功能、修复建议在feature/xxx、fix/xxx分支开发，测试无误后合并到主分支。

### 12.3 代码回滚

- **查看历史提交**
  ```bash
  git log --oneline
  ```

- **回滚到指定历史版本（慎用，建议先备份）**
  ```bash
  git reset --hard <commit-hash>
  ```
  或仅回滚某文件：
  ```bash
  git checkout <commit-hash> -- path/to/file
  ```

- **撤销最近一次提交但保留修改**
  ```bash
  git reset --soft HEAD~1
  ```

- **前后端均可独立回滚**  
  - 只需在根目录操作，指定 frontend/ 或 backend/ 下的文件即可。
  - 支持跨目录的整体回滚或单独回滚前端/后端任意文件。

### 12.4 自动化与协作建议

- 每次重大变更（如依赖升级、架构调整、需求变更）都应单独commit，便于回滚和追溯。
- 建议定期推送到远程仓库（如GitHub、Gitee等）备份。
- 合并分支前建议rebase或merge，解决冲突后再提交。

### 12.5 AI/自动化友好

- Cursor agent 在自动生成、修改、删除代码时，**每一步都应自动执行 `git add` 和 `git commit`，并写明操作内容**，确保所有变更可回滚。
- 任何自动化批量操作前，建议先自动创建备份分支。

---

**请严格遵循本技术架构规范，确保项目开发、协作、自动化、回滚与扩展的高效与安全。如有新需求，先由Cursor agent生成方案并经用户确认后再执行。**

---

###13 将Agent会话记录的问题，与成功解决的方案进行记录，形成知识库。避免后续再出现同样的问题
14. 自动化目录保护与路径校验（保障措施）
强制目录保护：所有自动化操作（包括代码生成、依赖安装、文件写入、命令执行等）仅允许在 /Users/stylesu/Documents/myproject/mywebsite 及其子目录下进行，严禁访问或操作 testwebsite 等错误目录。
路径校验：每次自动化操作前，系统会自动校验当前工作目录，若发现路径异常（如非mywebsite目录），将立即中止操作并提示用户。
问题记录：所有路径误用、目录异常等问题将自动记录到项目问题知识库，后续自动化流程会优先规避同类问题，确保团队协作和AI自动化开发的安全性与规范性。
本条款为强制执行，任何自动化或人工操作均需严格遵守。